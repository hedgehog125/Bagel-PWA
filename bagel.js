Bagel={init:e=>{let t=Bagel.internal.current,n=Bagel.internal.subFunctions.init;return Bagel.internal.saveCurrent(),t.game=e,e=n.check(e),n.misc(e),Bagel.internal.loadPlugin(Bagel.internal.plugin,e,{}),n.listeners(e,e.internal.renderer.canvas.addEventListener),n.plugins(e),n.assets(e),n.methods(e),n.initScripts(e),n.initSprites(e),n.preload(e),n.loadingScreen(e),Bagel.internal.games[e.id]=e,Bagel.internal.loadCurrent(),e},internal:{plugin:{info:{id:"Internal",description:"The built-in plugin, adds an image based sprite type, a canvas and a renderer. Also contains some useful methods."},plugin:{types:{assets:{imgs:{args:{id:{required:!0,types:["string"],description:"The id to target the image by."},src:{required:!0,types:["string"],description:"The src of the image."}},description:'Images give a sprite (only the sprite type though) its appearance. Just set its "img" argument to the id of the image you want to use.',check:(e,t,n,i,r,s)=>{let a=i.id();return a||((a=i.isInternal())||void 0)},init:(e,t,n,i,r)=>{let s=new Image;(n=>{n.onload=(()=>{t({img:n,JSON:e})})})(s),s.src=e.src},get:{name:"img"}},snds:{args:{id:{required:!0,types:["string"],description:"The id to target the sound by."},src:{required:!0,types:["string"],description:"The src of the sound."}},description:"Sounds can be played by anything. They're played using Game.playSound(<id>)",check:(e,t,n,i,r,s)=>{let a=i.id();return a||((a=i.isInternal())||void 0)},init:(e,t,n,i,r)=>{let s=new Audio;s.preload="metadata",(n=>{n.onloadeddata=(()=>{t({snd:n,JSON:e})})})(s),hmm=s,s.load(),s.src=e.src},get:{name:"snd"}}},sprites:{sprite:{args:{x:{required:!1,default:"centred",types:["number","string","function"],description:'The x position for the sprite. Can also be set to "centred" to centre it along the x axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.width - 50"'},y:{required:!1,default:"centred",types:["number","string","function"],description:'The y position for the sprite. Can also be set to "centred" to centre it along the y axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.height - 50"'},img:{required:!1,default:null,types:["string","undefined"],description:"The image for the sprite to use to start with. If set to null or not specified, the sprite will be invisible."},width:{required:!1,default:"1x",types:["number","string"],description:'The width for the sprite. Defaults to the width of the image. You can also set it to a multiple of the image width by setting it to "1x", "2x", etc.'},height:{required:!1,default:"1x",types:["number","string"],description:'The height for the sprite. Defaults to the height of the image. You can also set it to a multiple of the image height by setting it to "1x", "2x", etc.'},visible:{required:!1,default:!0,types:["boolean"],description:"If the sprite is visible or not."},alpha:{required:!1,default:1,types:["number"],description:"The alpha of the sprite. 1 is fully visible, 0.5 is partially and 0's invisible."},angle:{required:!1,default:90,types:["number"],description:"The angle of the sprite. In degrees. 0º = up. 180º = down. -90º = left. 90º = right."}},cloneArgs:{x:{syntax:{description:'The x position for the clone. Can also be set to "centred" to centre it along the x axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.width - 50"'},mode:"replace"},y:{syntax:{description:'The y position for the clone. Can also be set to "centred" to centre it along the y axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.height - 50"'},mode:"replace"},img:{syntax:{description:"The image for the clone to use to start with. If set to null or not specified anywhere, the clone will be invisible."},mode:"replace"},width:{syntax:{description:'The width for the clone. Defaults to the width of the image. You can also set it to a multiple of the image width by setting it to "1x", "2x", etc.'},mode:"replace"},height:{syntax:{description:'The height for the clone. Defaults to the height of the image. You can also set it to a multiple of the image height by setting it to "1x", "2x", etc.'},mode:"replace"},visible:{syntax:{description:"Determines if the clone is visible or not."},mode:"replace"},alpha:{syntax:{description:"The alpha of the clone. 1 is fully visible, 0.5 is partially and 0's invisible."},mode:"replace"},angle:{syntax:{description:"The angle of the clone. In degrees. 0º = up. 180º = down. -90º = left. 90º = right."},mode:"replace"}},listeners:{fns:{xy:(e,t,n,i,r,s)=>{"string"==typeof t&&"centred"==t&&(e[n]=i["x"==n?"width":"height"]/2),"function"==typeof t&&(e[n]=t(e,i))},dimensions:(e,t,n,i,r,s)=>{if("string"==typeof t&&t.includes("x")){let i=parseFloat(t.split("x")[0]);e[n]=Bagel.get.asset.img(s.img)[n]*i}"function"==typeof t&&(e[n]=t(e,i))}},property:{x:{get:"xy"},y:{get:"xy"},width:{get:"dimensions"},height:{get:"dimensions"},scale:{set:(e,t,n,i,r,s)=>{s.width=t+"x",s.height=t+"x"},get:(e,t,n,i,r)=>{let s=Bagel.get.asset.img(t),a=e.width/s.width,o=e.height/s.height;e.scale=(a+o)/2}},angle:{set:(e,t,n,i,r,s)=>{let a=s.internal.cache,o=Bagel.maths.degToRad(e.angle+90);a.cos=Math.cos(o),a.sin=Math.sin(o)},get:e=>{e.angle=(e.angle+180)%360-180}}}},description:"A basic type of sprite. Has the appearance of the image specified.",check:(e,t,n,i,r)=>{},init:(e,t,n)=>{e.last={collision:null},e.internal.cache={},e.angle=e.internal.properties.angle},render:{ctx:(e,t,n,i,r,s,a)=>{if(null==e.img)return;let o=i.internal.assets.assets.imgs;if(null==o[e.img])return;let l=o[e.img].img;t.globalAlpha=e.alpha,s*=e.width>=0?1:-1,a*=e.height>=0?1:-1,t.scale(s,a);let d=e.width/2,u=e.height/2;if(90==e.angle)t.drawImage(l,e.x-d,e.y-u,e.width,e.height);else{let n=Bagel.maths.degToRad(e.angle-90),i=e.x,r=e.y;t.translate(i,r),t.rotate(n),t.drawImage(l,-d,-u,e.width,e.height),t.rotate(-n),t.translate(-i,-r)}t.setTransform(1,0,0,1,0,0),t.globalAlpha=1}}},canvas:{args:{x:{required:!1,default:"centred",types:["number","string","function"],description:'The x position for the canvas. Can also be set to "centred" to centre it along the x axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.width - 50"'},y:{required:!1,default:"centred",types:["number","string","function"],description:'The y position for the canvas. Can also be set to "centred" to centre it along the y axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.height - 50"'},width:{required:!0,types:["number","function"],description:'The width for the canvas. Can also be a function that returns a position when the game loads. e.g:\n"(me, game) => game.width * 0.2"'},height:{required:!0,types:["number","function"],description:'The height for the canvas. Can also be a function that returns a position when the game loads. e.g:\n"(me, game) => game.height * 0.2"'},visible:{required:!1,default:!0,types:["boolean"],description:"If the canvas is visible or not."},alpha:{required:!1,default:1,types:["number"],description:"The alpha of the canvas. 1 is fully visible, 0.5 is partially and 0's invisible."},fullRes:{required:!1,default:!1,types:["boolean"],description:"If true, the canvas width and height will be automatically changed to ensure it's rendered at the full resolution."},render:{required:!1,types:["function"],description:'Renders each frame for the canvas. The arguments provided are: "sprite", "game", "ctx" and "canvas".'}},cloneArgs:{x:{syntax:{description:'The x position for the clone. Can also be set to "centred" to centre it along the x axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.width - 50"'},mode:"replace"},y:{syntax:{description:'The y position for the clone. Can also be set to "centred" to centre it along the x axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.height - 50"'},mode:"replace"},width:{syntax:{description:'The width for the clone. Can also be a function that returns a position when the game loads. e.g:\n"(me, game) => game.width * 0.2"'},mode:"replace"},height:{syntax:{description:'The height for the clone. Can also be a function that returns a position when the game loads. e.g:\n"(me, game) => game.height * 0.2"'},mode:"replace"},visible:{syntax:{description:"If the clone is visible or not."},mode:"replace"},alpha:{syntax:{description:"The alpha of the clone. 1 is fully visible, 0.5 is partially and 0's invisible."},mode:"replace"},fullRes:{mode:"replace"},render:{syntax:{description:'Renders each frame for the clone. The arguments provided are: "sprite", "game", "ctx" and "canvas".'},mode:"replace"}},listeners:{fns:{xy:(e,t,n,i,r,s)=>{"string"==typeof t&&"centred"==t&&(e[n]=i["x"==n?"width":"height"]/2),"function"==typeof t&&(e[n]=t(e,i))},dimensions:(e,t,n,i,r,s)=>{"function"==typeof t&&(e[n]=t(e,i))}},property:{x:{get:"xy"},y:{get:"xy"},width:{get:"dimensions"},height:{get:"dimensions"}}},description:'A "2d" canvas sprite. Anything rendered onto the canvas gets rendered onto the main canvas.',init:(e,t)=>{let n=document.createElement("canvas"),i=n.getContext("2d"),r=t.internal.renderer.canvas.width/t.width,s=t.internal.renderer.canvas.height/t.height;n.width=e.width*window.devicePixelRatio,n.height=e.height*window.devicePixelRatio,e.fullRes&&(n.width*=r,n.height*=s),e.canvas=n,e.ctx=i},render:{ctx:(e,t,n,i,r,s,a)=>{e.fullRes&&(e.canvas.width=e.width*window.devicePixelRatio*s,e.canvas.height=e.height*window.devicePixelRatio*a);let o=Bagel.internal.current;Bagel.internal.saveCurrent(),o.plugin=null,o.sprite=e,e.render&&e.render(e,i,e.ctx,e.canvas),Bagel.internal.loadCurrent(),t.globalAlpha=e.alpha,t.scale(s,a),t.drawImage(e.canvas,e.x-e.width/2,e.y-e.height/2,e.width,e.height),t.setTransform(1,0,0,1,0,0),t.globalAlpha=1}}}}},assets:{},sprites:[],methods:{bagel:{maths:{category:{radToDeg:{fn:{normal:!0,fn:e=>180*e/Math.PI}},degToRad:{fn:{normal:!0,fn:e=>e*(Math.PI/180)}},get:{category:{direction:{fn:{normal:!0,fn:(e,t,n,i)=>Bagel.maths.radToDeg(Math.atan2(i-t,n-e))-90}},distance:{fn:{normal:!0,fn:(e,t,n,i)=>Math.sqrt(Math.pow(Math.abs(n-e),2)+Math.pow(Math.abs(i-t),2))}}}},hex:{fn:{normal:!0,fn:e=>1==(e=e.toString(16)).length?"0"+e:e}}}},download:{fn:{obArg:!1,args:{data:{required:!0,types:["string"],description:"The data for the file. Or the data URL if isUrl is set to true"},fileName:{required:!0,types:["string"],description:"The file name for the file to be downloaded."},isURL:{required:!1,default:!1,types:["boolean"],description:"If the data is a URL or not. This may be useful if you want to download a canvas using .toDataURL()."},mime:{required:!1,default:"text/plain",types:["string"],description:"The MIME type for the file."}},fn:e=>{let t;if(e.isURL)t=e.data;else{let n=new Blob([e.data],{type:e.mime});t=window.URL.createObjectURL(n)}let n=document.createElement("a");n.download=e.fileName,n.href=t,(e=>{e.onclick=(()=>e.remove())})(n),n.style.display="none",document.body.appendChild(n),n.click()}}},upload:{fn:{obArg:!1,args:{handler:{required:!0,types:["function"],description:"The handler function. It's given the data URL of the file as its first argument and the second is the file number, starting at 0 (for use with the 2nd argument set to true)"},multiple:{required:!1,default:!1,types:["boolean"],description:"If multiple files can be uploaded or not. The handler will be called once per file."}},fn:e=>{let t=document.createElement("input");t.type="file",t.style.display="none",t.multiple=e.multiple;t.addEventListener("change",()=>{let e=new FileReader;((e,n)=>{e.onload=(i=>{code(i.target.result,n),++n<t.files.length&&e.readAsDataURL(t.files[n])})})(e,0),e.readAsDataURL(t.files[0])},!1),t.click()}}},pwa:{category:{init:{fn:{obArg:!0,args:{worker:{required:!1,types:["string"],description:"The URL of the service worker. They can be generated using Bagel.pwa.generate.worker. Its arguments are the game, extra files (e.g index.html, js files) and an optional fileName for the worker that will be downloaded by it."},icons:{required:!1,default:!1,types:["boolean"],description:"If the icons exist or not. Generate them using Bagel.pwa.generate.icons."},manifest:{required:!1,types:["string"],description:"The src of the manifest. Generate one using Bagel.pwa.generate.manifest."},versions:{required:!1,types:["string"],description:"The src of the version JSON file. Generate versions using Bagel.pwa.generate.version."},version:{required:!1,types:["string"],description:"The src of the version file (the one that contains the latest version name). Generate versions using Bagel.pwa.generate.version."},versionStorageName:{required:!1,types:["string"],description:'The name for the localStorage that contains the current downloaded version. e.g "Marble game version". localStorage is shared on a website so make sure the name is unique to this game. It\'s explained in Bagel.pwa.generate.version.'},cacheStorageName:{required:!1,types:["string"],description:"The cache storage name provided by Bagel.pwa.generate.worker."},minified:{required:!1,default:!1,types:["boolean"],description:"If you've minified your main JavaScript file. You should also use the minified version of Bagel.js."}},fn:e=>{if(e.worker?navigator.serviceWorker&&navigator.serviceWorker.register(e.worker):console.warn("The Bagel.js service worker's missing. Generate one using Bagel.pwa.generate.worker."),e.icons||console.warn("The Bagel.js icons are missing. Generate the icons using Bagel.pwa.generate.icons."),e.manifest){let t=document.createElement("link");t.rel="manifest",t.href=e.manifest,document.head.appendChild(t)}else console.warn("The Bagel.js manifest is missing. Generate one using Bagel.pwa.generate.manifest once you've generated the icons using Bagel.pwa.generate.icons.");e.versions||console.warn("The Bagel.js version JSON file's missing. Use Bagel.pwa.generate.version."),e.version?e.versionStorageName&&e.versions&&e.cacheStorageName&&fetch(e.version).then(t=>t.text().then(t=>{t=t.split("\n").join("");let n=localStorage.getItem(e.versionStorageName);null==n&&(n=0),n!=t&&fetch(e.versions).then(t=>t.json().then(t=>{caches.open(e.cacheStorageName).then(i=>{for(;n<t.versions.length;)i.delete(t.versions[n].changed),n++;localStorage.setItem(e.versionStorageName,n)})}))})):console.warn("The Bagel.js latest version file's missing. Use Bagel.pwa.generate.version."),e.versionStorageName||console.warn("The Bagel.js version storage name's missing. This is explained in Bagel.pwa.generate.version."),e.cacheStorageName||console.warn("The Bagel.js cache name's missing. This should've been added after running Bagel.pwa.generate.worker."),e.minified||console.warn("Your code isn't minified. Look up an online tool to help. Once you're done, set \"minified\" in Bagel.pwa.init to true. Also, make sure to run lighthouse or an equivalent so you can follow the best practices :)")}}},generate:{category:{worker:{fn:{obArg:!1,args:{game:{required:!0,types:["object"],description:"The game object."},icons:{required:!0,types:["string"],description:"The src of the folder containing the icons. Generate them with Bagel.pwa.generate.icons."},extraFiles:{required:!1,default:[],types:["array"],description:"Any extra files that aren't assets but are needed. e.g index.html, main.js, bagel.js etc."},storageID:{required:!1,types:["string"],description:'The id for the cache storage the worker uses. Defaults to "Bagel.js" followed by a space and then the name of the game specified.'},manifest:{required:!1,default:"manifest.json",types:["string"],description:"The src of your manifest or what will be the src."},fileName:{required:!1,default:"worker.js",types:["string"],description:"The file name for the worker JavaScript file."}},fn:e=>{let t=e.extraFiles;for(let e in game.game.assets)for(let n in game.game.assets[e])t.push(game.game.assets[e][n].src);"/"!=e.icons[e.icons.length-1]&&(e.icons+="/");let n=[128,144,152,192,256,512];for(let i in n)t.push(e.icons+n[i]+"x"+n[i]+".png");t.push(e.manifest);let i=["let toCache = <CACHE>;",'self.addEventListener("install",e=>{',"self.skipWaiting();","e.waitUntil(","caches.open(<NAME>).then(cache=>cache.addAll(toCache))",")","});",'self.addEventListener("fetch",e=>{',"e.respondWith(","caches.match(e.request).then(response=>response||fetch(e.request))",")","});"].join("").replace("<CACHE>",JSON.stringify(t));null==e.storageID&&(e.storageID="Bagel.js "+e.game.id),i=i.replace("<NAME>",JSON.stringify(e.storageID)),Bagel.download(i,e.fileName,!1,"application/javascript"),console.log("Your service worker has been generated. Make sure to place this in the root directory of your project, also make sure that this page is in the root directory. You should also make sure that the array provided for the second argument contains your JavaScript (including the Bagel.js file) files and your HTML file.\nA new worker will need to be generated for each version (unless there's no new files) (versions can be generated using Bagel.pwa.generate.version)"),console.log('Make sure you enable the worker by setting the "worker" argument to '+JSON.stringify(e.fileName)+' and by setting "cacheStorageName" to '+JSON.stringify(e.storageID)+" in Bagel.pwa.init. You should also generate a version using Bagel.pwa.generate.version if you haven't already.")}}},icons:{fn:{obArg:!1,args:{src:{required:!0,types:["string"],description:"The src of the 512x512 resolution icon."},pixelArt:{required:!0,default:!0,types:["boolean"],description:"If the icon is pixel art or not. If it is, anti-aliasing will be disabled and there'll be no warning for having a low resolution icon."}},fn:e=>{let t=new Image;(t=>{t.onload=(()=>{t.width!=t.height&&console.warn("Image width doesn't match image height."),e.pixelArt||512==t.width&&512==t.height||console.warn("Image isn't 512x512.");let n=document.createElement("canvas"),i=n.getContext("2d"),r=[128,144,152,192,256,512];for(let s in r){let a=r[s];n.width=a,n.height=a,i.imageSmoothingEnabled=!e.pixelArt,i.clearRect(0,0,n.width,n.height),i.drawImage(t,0,0,n.width,n.height),Bagel.download(n.toDataURL("image/png"),a+"x"+a+".png",!0)}console.log('128, 144, 152, 192, 256 and 512 pixel resolutions have been generated. You may need to enable automatic downloads. These should be in a folder in your project directory (or subfolder). You can add them to your PWA by setting the "icons" argument in Bagel.pwa.init to the src of the folder containing them. e.g if you put them in assets/imgs/icons then it should be "assets/imgs/icons/".')})})(t),t.src=e.src,console.log("Loading image...")}}},manifest:{fn:{obArg:!0,args:{icons:{required:!0,types:["string"],description:"The src of the folder containing the icons. Ending it in a slash is optional. Generate these using Bagel.pwa.generate.icons, give it the src of your highest resolution image followed by if it's pixel art or not."},name:{required:!0,types:["string"],description:"The name of your PWA. Usually the name shown in an app list."},shortName:{required:!0,types:["string"],description:"A shorter name."},backgroundColour:{required:!1,types:["string"],description:"The background colour for the PWA. Is an HTML colour. Defaults to the page's background colour."},themeColour:{required:!1,types:["string"],description:"The theme colour for the app. See https://developer.mozilla.org/en-US/docs/Web/Manifest/theme_color"},categories:{required:!1,types:["array"],description:"Any categories your PWA fits into. e.g games."},description:{required:!1,types:["string"],description:"A brief description of what this PWA is or does."},dir:{required:!1,types:["string"],description:'The direction of the text. Probably not needed as the Bagel.js pwa creator only works for games and not websites with games in them. Either "auto", "ltr" or "rtl".'},display:{required:!1,default:"fullscreen",types:["string"],description:'The display mode for the PWA. Can be "fullscreen", "standalone", "minimal-ui" or "browser".'},iarcRatingId:{required:!1,types:["string"],description:"An id for if your website's been age rated or not."},lang:{required:!1,types:["string"],description:'The language of your PWA. e.g "en-UK".'},orientation:{required:!1,default:"any",types:["string"],description:'The default orientation for the PWA. Most of the time, you probably want to set this to "landscape" or leave it so it\'s "any".'},preferRelatedApplications:{required:!1,types:["boolean"],description:"Tells the browser to encourage users to install a similar app, e.g your native app instead. You probably won't want to use this."},relatedApplications:{required:!1,types:["array"],description:"See https://developer.mozilla.org/en-US/docs/Web/Manifest/related_applications"},scope:{required:!1,default:location.href,types:["string"],description:"The different URLs that the manifest applies to. Defaults to just the page where this generator was run."},screenshots:{required:!1,types:["array"],description:"Intended to be used by PWA stores. See https://developer.mozilla.org/en-US/docs/Web/Manifest/screenshots"},startURL:{required:!1,default:location.href,types:["string"],description:"The URL for the PWA to start at when it's opened."}},fn:e=>{let t={icons:"icons",name:"name",shortName:"short_name",backgroundColour:"background_color",themeColour:"theme_color",categories:"categories",description:"description",dir:"dir",display:"display",iarcRatingId:"iarc_rating_id",lang:"lang",orientation:"orientation",preferRelatedApplications:"prefer_related_applications",relatedApplications:"related_applications",scope:"scope",screenshots:"screenshots",startURL:"start_url"},n={};for(let i in e)null==e[i]?"backgroundColour"==i&&document.body&&(n[t[i]]=document.body.bgColor):n[t[i]]=e[i];"/"!=(e=n).icons[e.icons.length-1]&&(e.icons+="/");let i=[128,144,152,192,256,512],r=[];for(let t in i){let n=i[t],s=n+"x"+n;r.push({src:e.icons+s+".png",sizes:s,type:"image/png"})}e.icons=r,Bagel.download(JSON.stringify(e),"manifest.json",!1,"application/json"),console.log('Manifest generated. Put it in the root directory of your project and set the "manifest" argument in Bagel.init.pwa to its src.')}}},version:{fn:{obArg:!1,args:{name:{required:!0,types:["string"],description:"The name of this version. e.g 1.0"},changed:{required:!0,types:["array"],description:"The srcs of files that have changed. This should include removed files but not new files. A rename should be treated as a removed file and then a new file. If this is your first version, this should be empty."},versions:{required:!1,default:{syntax:1,versions:[]},types:["object"],description:"The current version JSON."},fileName:{required:!1,default:"versions.json",types:["string"],description:"The file name for the versions JSON file."}},fn:e=>{let t=0!=e.versions.versions.length;e.versions.versions.push({name:e.name,changed:e.changed}),Bagel.download(JSON.stringify(e.versions),e.fileName,!1,"application/json"),t||1==parseFloat(e.name)||console.warn("No previous version JSON was specified and this doesn't appear to be the first version.\nIf this isn't the first version, rerun this with the 3rd argument set to your current version JSON (not as a string)."),console.log("New version file generated. If there was no warning or you think it's incorrect, you should now "+(t?"replace your existing versions.json file.":"move this file into your root directory")+"."),t?console.log("Don't forget to update your version file with\n"+e.name+" :)"):(console.log('You also need a file to specifiy what the latest version is. Create a plain text file called "version.txt" in your root directory and put '+JSON.stringify(e.versions.versions.length)+" in it. New lines will be ignored."),console.log('Finally, link these two into your PWA by setting the "versions" and "version" arguments in Bagel.pwa.init to their corresponding file srcs, "versionStorageName" should also be set to something unique to the game (it\'s where the installed version is saved). If you\'ve followed all the other steps properly, your PWA should now be working. (make sure you\'re running on an HTTPS server or localhost)'))}}}}}}}},game:{playSound:{fn:{obArg:!1,args:{id:{required:!0,types:["string"],description:"The id of the sound to play."},loop:{required:!1,default:!1,types:["boolean"],description:"If the audio should loop or not."},startTime:{required:!1,default:0,types:["number"],description:"The starting time for the audio in seconds."}},fn:(e,t,n)=>{let i=Bagel.get.asset.snd(t.id,e);if(i.currentTime=t.startTime,i.loop=t.loop,n.vars.audio.autoPlay){let r=i.play();null!=r&&(n=>{r.then(()=>{n.vars.audio.autoPlay=!0}).catch(()=>{let r=Bagel.internal.current;if(Bagel.internal.saveCurrent(),r.plugin=n,n.vars.audio.autoPlay=!1,t.loop||i.duration>=5){if(!Bagel.get.sprite(".Internal.unmute",e,!0)){let t='plugin Internal\'s function "game.playSound"';e.add.asset.img({id:".Internal.unmuteButtonMuted",src:"../assets/imgs/muted.png"},t),e.add.asset.img({id:".Internal.unmuteButton",src:"../assets/imgs/unmuted.png"},t),e.add.asset.snd({id:".Internal.unmuteButtonClick",src:"../assets/snds/clickDown.mp3"},t),e.add.asset.snd({id:".Internal.unmuteButtonClickUp",src:"../assets/snds/clickUp.mp3"},t),e.add.asset.snd({id:".Internal.unmuteButtonMouseTouch",src:"../assets/snds/mouseTouch.mp3"},t);let i=Math.min(e.width,e.height)/10;e.add.sprite({id:".Internal.unmute",type:"sprite",img:".Internal.unmuteButtonMuted",visible:!1,scripts:{steps:{appearAnimation:e=>{e.vars.delay<30?e.vars.delay++:(e.visible=!0,e.width!=e.vars.size&&(e.width*=1.4,e.width>=e.vars.size&&(e.width=e.vars.size,e.vars.appearAnimation=!1),e.height=e.width))},deleteAnimation:e=>{e.width/=1.4,e.height=e.width,e.width<1&&e.delete()},expandAnimation:e=>{e.width*=1.025,e.width>e.vars.expandedSize&&(e.width=e.vars.expandedSize),e.height=e.width},shrinkAnimation:e=>{e.width!=e.vars.size&&(e.width/=1.025,e.width<e.vars.size&&(e.width=e.vars.size),e.height=e.width),e.vars.plugin.vars.audio.autoPlay&&(e.vars.delete=!0)},play:t=>{let n=t.vars.plugin.vars;for(let t in n.audio.queue){Bagel.get.asset.snd(n.audio.queue[t],e).play().then().catch()}n.audio.autoPlay=!0,n.audio.queue=[],t.img=".Internal.unmuteButton"},pause:t=>{let n=t.vars.plugin.vars;for(let t in e.internal.assets.assets.snds){let i=e.internal.assets.assets.snds[t].snd;i.paused||(i.pause(),i.loop||i.duration>=5?n.audio.queue.push(t):i.currentTime=0)}n.audio.autoPlay=!1,t.img=".Internal.unmuteButtonMuted"}},all:[(e,t,n)=>{if(e.layer.bringToFront(),e.vars.appearAnimation)n("appearAnimation");else{t.input.mouse.down||(e.vars.clicked&&t.playSound(".Internal.unmuteButtonClickUp"),e.vars.clicked=!1);let i=e.vars.plugin.vars;e.vars.delete?n("deleteAnimation"):e.touching.mouseCircles()?(e.vars.touching||(t.playSound(".Internal.unmuteButtonMouseTouch"),e.vars.touching=!0),e.width!=e.vars.expandedSize&&n("expandAnimation"),t.input.mouse.down&&!e.vars.clicked&&(t.playSound(".Internal.unmuteButtonClick"),i.audio.autoPlay?n("pause"):n("play"),e.vars.clicked=!0)):(e.vars.touching=!1,n("shrinkAnimation"))}}]},vars:{plugin:n,size:i,expandedSize:1.1*i,delay:0,clicked:!1,delete:!1,touching:!1,appearAnimation:!0},x:i,y:e.height-i,width:1,height:1},'plugin Internal, function "game.playSound" (via Game.add.sprite)')}n.vars.audio.queue.push(t.id)}Bagel.internal.loadCurrent()})})(n)}}}}},sprite:{move:{fn:{appliesTo:["sprite"],obArg:!1,args:{amount:{required:!0,types:["number"],description:"The number of in game pixels (independent of the rendered canvas width and height) to move the sprite."},angle:{required:!1,types:["number"],description:"The angle in degrees for the sprite to move in. 0° -> Straight up. -180/180° -> Straight down. 90° -> Right (default of sprites). Defaults to the value of sprite.angle."}},fn:(e,t,n)=>{let i=e.internal.cache;e.x+=i.cos*t.amount,e.y+=i.sin*t.amount}}},layer:{category:{bringToFront:{fn:{appliesTo:["sprite","canvas"],obArg:!1,args:{},fn:(e,t,n)=>{if(1==n.game.sprites.length)return;let i=n.internal.renderer.layers,r=i.indexOf(e.idIndex);if(i[i.length-1]==e.idIndex)return;let s=i[i.length-1];i[i.length-1]=e.idIndex,i[r]=null;let a=i.length-2;for(;a>=0;){if(null==i[a])return void(i[a]=s);let e=i[a];i[a]=s,s=e,a--}}}},bringForwards:{fn:{appliesTo:["sprite","canvas","renderer"],obArg:!1,args:{},fn:(e,t,n)=>{if(1==n.game.sprites.length)return;let i=n.internal.renderer.layers,r=i.indexOf(e.idIndex);if(i[i.length-1]==e.idIndex)return;let s=i[r+1];i[r+1]=e.idIndex,i[r]=s}}},sendToBack:{fn:{appliesTo:["sprite","canvas","renderer"],obArg:!1,args:{},fn:(e,t,n)=>{if(1==n.game.sprites.length)return;let i=n.internal.renderer.layers,r=i.indexOf(e.idIndex);if(i[0]==e.idIndex)return;let s=i[0];i[0]=e.idIndex,i[r]=null;let a=1;for(;a<i.length;){if(null==i[a])return void(i[a]=s);let e=i[a];i[a]=s,s=e,a++}}}},sendBackwards:{fn:{appliesTo:["sprite","canvas","renderer"],obArg:!1,args:{},fn:(e,t,n)=>{if(1==n.game.sprites.length)return;let i=n.internal.renderer.layers,r=i.indexOf(e.idIndex);if(i[0]==e.idIndex)return;let s=i[r-1];i[r-1]=e.idIndex,i[r]=s}}}}},touching:{category:{mouse:{fn:{appliesTo:["sprite","canvas"],obArg:!0,args:{box:{required:!1,types:["object"],subcheck:{x:{required:!0,types:["number"],description:"The x position of the middle of the bounding box."},y:{required:!0,types:["number"],description:"The y position of the middle of the bounding box."},width:{required:!0,types:["number"],description:"The width of the bounding box."},height:{required:!0,types:["number"],description:"The height of the bounding box."}},description:"The bounding box to be used. If unspecified, the sprite's width, height, x and y coordinates will be used to make one."},mouseSize:{required:!1,default:0,types:["number"],description:"The size of the bounding box for the mouse. Defaults to one pixel."},mode:{required:!1,default:"touching",check:e=>{if(!["touching","overlap"].includes(e))return'Huh, looks like you used an invalid option for the "mode" argument. It can only be "touching" or "overlap" and you put '+JSON.stringify(e)+"."},description:'The touching mode. Defaults to "touching" but can also be "overlap".'}},fn:(e,t,n)=>{null==t.box?t.box={x:e.x-e.width/2,y:e.y-e.height/2,width:e.width,height:e.height}:(t.box.x-=e.width/2,t.box.y-=e.height/2),"touching"==t.mode&&(t.box.width+=2,t.box.height+=2,t.box.x--,t.box.y--);let i,r=t.mouseSize/2;i=Bagel.device.is.touchscreen?n.input.touches:[{x:n.input.mouse.x,y:n.input.mouse.y}];let s=t.box;for(let t in i){let n=i[t];if(n.x-r<s.x+s.width&&n.x+r>s.x&&n.y-r<s.y+s.height&&n.y+r>s.y)return e.last.collision={x:n.x,y:n.y,type:"mouse"},!0}return!1}}},mouseCircles:{fn:{appliesTo:["sprite","canvas"],obArg:!0,args:{radius:{required:!1,types:["number"],description:"The radius of the bounding box. If unspecified, the sprite's width and height will be used to make one."},mouseRadius:{required:!1,default:1,types:["number"],description:"The radius of the bounding box for the mouse. Defaults to one pixel."},mode:{required:!1,default:"overlap",check:e=>{if(!["touching","overlap"].includes(e))return'Huh, looks like you used an invalid option for the "mode" argument. It can only be "touching" or "overlap" and you put '+JSON.stringify(e)+"."},description:'The touching mode. Defaults to "overlap" but can also be "touching".'}},fn:(e,t,n)=>{let i,r={x:e.x,y:e.y};null==t.radius?r.radius=Math.max(e.width,e.height)/2:r.radius=t.radius,"touching"==t.mode&&r.radius++,i=Bagel.device.is.touchscreen?n.input.touches:[{x:n.input.mouse.x,y:n.input.mouse.y}];let s=t.mouseRadius+r.radius;for(let t in i){let n=i[t];if(Math.sqrt(Math.pow(Math.abs(r.x-n.x),2)+Math.pow(Math.abs(r.y-n.y),2))<=s)return e.last.collision={x:n.x,y:n.y,type:"mouse"},!0}return!1}}},sprite:{fn:{appliesTo:["sprite","canvas"],obArg:!1,args:{sprite:{required:!0,types:["string"],description:"The id of the sprite to check against for a collision."},options:{required:!1,default:{},subcheck:{box:{required:!1,types:["object"],subcheck:{x:{required:!0,types:["number"],description:"The x position of the middle of the bounding box."},y:{required:!0,types:["number"],description:"The y position of the middle of the bounding box."},width:{required:!0,types:["number"],description:"The width of the bounding box."},height:{required:!0,types:["number"],description:"The height of the bounding box."}},description:"The bounding box to be used. If unspecified, the sprite's width, height, x and y coordinates will be used to make one."},mode:{required:!1,default:"overlap",types:["string"],check:e=>{if(!["touching","overlap"].includes(e))return'Huh, looks like you used an invalid option for the "mode" argument. It can only be "touching" or "overlap" and you put '+JSON.stringify(e)+"."},description:'The touching mode. Defaults to "overlap" but can also be "touching".'},include:{required:!1,default:{},types:["object"],subcheck:{clones:{required:!1,default:!0,types:["boolean"],description:"If this collision check includes clones or not."},invisibles:{required:!1,default:!1,types:["boolean"],description:"If this collision check includes invisible sprites or not."}},description:"A few options for whether or not some sprites should be included in the checks."}},types:["object"],description:"A few other options for this function."},check:{required:!1,types:["function"],description:"A function that does an additional check before a collision is reported. It's given the sprite that's being checked against, the current sprite and the game. (in that order)"}},fn:(e,t,n)=>{null==t.options.box?t.options.box={x:e.x-e.width/2,y:e.y-e.height/2,width:e.width,height:e.height}:(t.options.box.x-=e.width/2,t.options.box.y-=e.height/2);let i=t.options.box;"touching"==t.options.mode&&(i.width+=2,i.height+=2,i.x--,i.y--);let r=[t.sprite],s=Bagel.get.sprite(t.sprite,n);t.options.includeClones&&(r=[...r,...s.cloneIDs]);let a=null==t.check;for(let s in r){let o=r[s];if((t.options.include.invisibles||o.visible)&&(i.x<o.x+o.width&&i.x+i.width>o.x&&i.y<o.y+o.height&&i.y+i.height>o.y&&(t.check&&(a=t.check(o,e,n)),a)))return e.last.collision={sprite:o,type:"sprite"},!0}return!1}}}}}}},scripts:{init:[],main:[],steps:{}}},vars:{audio:{autoPlay:!0,queue:[]}}},loadPlugin:(e,t,n)=>{let i=Bagel.internal.subFunctions.loadPlugin;e=Bagel.internal.deepClone(e);let r=Bagel.internal.current;Bagel.internal.saveCurrent(),r.plugin=e,e=i.check(t,e);let s=i.merge;s.types.assets(t,e),s.types.sprites(t,e),s.methods(t,e),Bagel.internal.loadCurrent()},loadAsset:(e,t,n,i,r)=>{let s=Bagel.internal.current;Bagel.internal.saveCurrent(),s.asset=e,s.assetType=n,s.i=r,s.where=i,s.game=t;let a=t.internal.combinedPlugins.types.assets[n],o=a.internal.plugin;s.plugin=o;let l=t.internal.assets;null==l.assets[n]&&(l.assets[n]={}),Bagel.check({ob:e,where:i,syntax:a.args},Bagel.internal.checks.disableArgCheck);let d=a.check(e,t,Bagel.internal.check,Bagel.internal.standardChecks.asset,o,r);d&&(Bagel.internal.loadCurrent(),console.error(d),console.log("In plugin "+JSON.stringify(o.info.id)+"."),Bagel.internal.oops(t));let u=((e,t)=>i=>{let r=t.internal.assets;r.assets[n][e.id]=i,r.loaded++,r.loading--,0==r.loading&&t.config.loading.skip&&(t.loaded=!0)})(e,t);a.init(e,u,t,a.internal.plugin,r);t.internal.assets.loading++,Bagel.internal.loadCurrent()},createSprite:(e,t,n,i,r,s)=>{let a=Bagel.internal.subFunctions.createSprite;e.type=null==e.type?t.internal.combinedPlugins.defaults.sprites.type:e.type;let o=t.internal.combinedPlugins.types.sprites[e.type],l=Bagel.internal.current,d=l.plugin?l.plugin.info.id:null;Bagel.internal.saveCurrent(),l.sprite=e,l.game=t,l.plugin=o.internal.plugin,r||(e=a.check(e,t,n,i,d)),e.internal={scripts:{init:[],main:[],all:[]}};let u=a.register;return u.scripts("init",e,t,n),u.scripts("main",e,t,n),u.scripts("all",e,t,n),u.methods(e,t),u.listeners(e,t,n),e.cloneIDs=[],e.cloneCount=0,e.isClone=!!n,e.idIndex=s,t.internal.idIndex[e.id]=s,t.internal.renderer.layers.push(s),e.debug={renderTime:0,scriptTime:0,avg:{renderTime:0,scriptTime:0}},e.game=t,(t=>{e.clone=(e=>{let n=t,i=n.game;e=e||{};let r,s=Bagel.internal.findCloneID(n,i);null==e.id?(r=n.id+"#"+s,e.id=r):r=e.id,n.cloneIDs[s]=r,n.cloneCount++;let a=Bagel.internal.findSpriteID(i);(e=Bagel.internal.createSprite(e,i,n,'the function "sprite.clone"',!1,a)).cloneID=s,e.parent=n,i.game.sprites[a]=e,Bagel.internal.current.sprite=e;for(let t in e.scripts.init)e.scripts.init[t](e,i,Bagel.step);return Bagel.internal.current.sprite=n,e}),e.delete=(()=>{let e=t.game,n=Bagel.internal.subFunctions.delete;n.layers(t,e),n.scripts("init",t,e),n.scripts("main",t,e),n.scripts("all",t,e),n.misc(t,e)})})(e),a.extraChecks(e,t,i,s),a.init(e,t),Bagel.internal.loadCurrent(),e},tick:()=>{let e=Bagel.internal.subFunctions.tick,t=new Date;for(let t in Bagel.internal.games){let n=new Date,i=Bagel.internal.games[t];Bagel.internal.current.game=i,e.scaleCanvas(i),i.loaded?e.loaded(i):e.loading(i);let r=new Date;i.internal.FPSFrames++,i.maxPossibleFPS=1e3/(r-n),r-i.internal.lastFPSUpdate>=1e3&&(i.currentFPS=i.internal.FPSFrames,i.internal.FPSFrames=0,i.internal.lastFPSUpdate=r)}Bagel.internal.current.game=null;new Date;e.tick()},subFunctions:{init:{check:e=>("object"!=typeof e&&(console.error('Oh no! Your game JSON seems to be the wrong type. It must be the type "object", you used '+JSON.stringify(Bagel.internal.getTypeOf(e))+"."),Bagel.internal.oops()),null==e.id&&(console.error("Oh no! You forgot to specifiy an id for the game."),Bagel.internal.oops()),e.internal={renderer:{type:"canvas",width:e.width,height:e.height,lastRender:new Date,layers:[],canvas:document.createElement("canvas"),ratio:e.width/e.height},ids:[],idIndex:{},FPSFrames:0,lastFPSUpdate:new Date,scripts:{index:{init:{},main:{},all:[],sprites:{init:{},main:{},all:[]}}},assets:{loading:0,loaded:0,assets:{}},combinedPlugins:{types:{internal:{pluralAssetTypes:{}}},methods:{bagel:{},game:{},sprite:{}},defaults:{sprites:{type:"sprite"}}},lastState:!e.state},e=Bagel.check({ob:e,where:"GameJSON",syntax:Bagel.internal.checks.game},Bagel.internal.checks.disableArgCheck)),listeners:(e,t)=>{e.input={touches:[],mouse:{down:!1,x:0,y:0},keys:{isDown:function(e){return!!this.internal.game.input.keys.keys[e]},keys:{},internal:{game:e}},lookup:{left:37,right:39,up:38,down:40,space:32,w:87,a:65,s:83,d:68}},(e=>{t("mousemove",t=>{let n=e.internal.renderer.canvas,i=n.getBoundingClientRect(),r=e.input.mouse;r.x=(t.clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,r.y=(t.clientY-i.top)/(n.height/window.devicePixelRatio)*e.height},!1),t("mousedown",t=>{Bagel.device.is.touchscreen=!1,e.input.mouse.down=!0},!1),t("mouseup",t=>{e.input.mouse.down=!1},!1),t("touchstart",t=>{Bagel.device.is.touchscreen=!0;let n=e.internal.renderer.canvas,i=n.getBoundingClientRect(),r=e.input.mouse;if(null==t.touches)r.x=(t.clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,r.y=(t.clientY-i.top)/(n.height/window.devicePixelRatio)*e.height,e.input.touches=[{x:e.input.mouse.x,y:e.input.mouse.y}];else{r.x=(t.touches[0].clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,r.y=(t.touches[0].clientY-i.top)/(n.height/window.devicePixelRatio)*e.height,e.input.touches=[];for(let r in context.touches)e.input.touches.push({x:(t.touches[r].clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,y:(t.touches[r].clientY-i.top)/(n.height/window.devicePixelRatio)*e.height})}Bagel.internal.autoplaySounds(),r.down=!0,context.preventDefault()},!1),t("touchmove",t=>{Bagel.device.is.touchscreen=!0;let n=e.internal.renderer.canvas,i=n.getBoundingClientRect(),r=e.input.mouse;if(null==t.touches)r.x=(t.clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,r.y=(t.clientY-i.top)/(n.height/window.devicePixelRatio)*e.height,e.input.touches=[{x:r.x,y:r.y}];else{r.x=(t.touches[0].clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,r.y=(t.touches[0].clientY-i.top)/(n.height/window.devicePixelRatio)*e.height,e.input.touches=[];for(let r in context.touches)e.input.touches.push({x:(t.touches[r].clientX-i.left)/(n.width/window.devicePixelRatio)*e.width,y:(t.touches[r].clientY-i.top)/(n.height/window.devicePixelRatio)*e.height})}r.down=!0,context.preventDefault()},!1),t("touchend",t=>{Bagel.device.is.touchscreen=!0,e.input.touches=[],Bagel.internal.autoplaySounds(),e.input.mouse.down=!1,context.preventDefault()},!1),document.addEventListener("keydown",e=>{for(let t in Bagel.internal.games){Bagel.internal.games[t].input.keys.keys[e.keyCode]=!0}},!1),document.addEventListener("keyup",e=>{for(let t in Bagel.internal.games){Bagel.internal.games[t].input.keys.keys[e.keyCode]=!1}},!1),"complete"==document.readyState?Bagel.internal.subFunctions.init.documentReady(e):document.addEventListener("readystatechange",()=>{"complete"==document.readyState&&Bagel.internal.subFunctions.init.documentReady(e)})})(e)},misc:e=>{e.loaded=!1,e.paused=!1,e.currentFPS=60,e.maxPossibleFPS=60;let t=e.internal.renderer;if("auto"==e.config.display.renderer){let t=document.createElement("canvas"),n=t.getContext("webgl")||t.getContext("experimental-webgl");e.config.display.renderer=null==n?"ctx":"webgl"}e.config.display.renderer="ctx","webgl"==e.config.display.renderer?t.ctx=t.canvas.getContext("webgl")||t.canvas.getContext("experimental-webgl"):t.ctx=t.canvas.getContext("2d"),t.canvas.id="Bagel.js "+e.id,t.ctx.imageSmoothingEnabled=!1,t.canvas.width=e.width,t.canvas.height=e.height,"fill"==e.config.display.mode?t.canvas.style="margin:0;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);":t.canvas.style="display: block; touch-action: none; user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0);",Bagel.internal.subFunctions.tick.scaleCanvas(e),(e=>{e.add={sprite:(t,n="the function Game.add.sprite")=>{n+=" -> the first argument";let i=Bagel.internal.findSpriteID(e);if(t=Bagel.internal.createSprite(t,e,!1,n,!1,i),e.game.sprites[i]=t,e.state==e.internal.lastState){let n=Bagel.internal.current;Bagel.internal.saveCurrent(),n.sprite=t,n.game=e;for(let n in t.scripts.init){let i=t.scripts.init[n];i.stateToRun==e.state&&"function"==typeof i.code&&i.code(t,e,Bagel.step)}Bagel.internal.loadCurrent()}},asset:{}},e.delete=(()=>{e.config.display.dom&&e.internal.renderer.canvas.remove(),delete Bagel.internal.games[e.id]})})(e)},scripts:(e,t)=>{let n=e.game.scripts[t],i=e.internal.scripts.index[t];for(let e in n){let t=n[e].stateToRun;null==i[t]&&(i[t]=[]),i[t].push({script:e})}},initScripts:e=>{let t=Bagel.internal.subFunctions.init.scripts;t(e,"init"),t(e,"main")},plugins:e=>{for(let t in e.game.plugins){let n=e.game.plugins[t];Bagel.internal.loadPlugin(n,e)}},assets:e=>{let t=e.game.assets;for(let n in t){let i=t[n];for(let t in i){let r=i[t];Bagel.internal.loadAsset(r,e,n,"GameJSON.game.assets."+n+" item "+t)}}},methods:e=>{let t=e.internal.combinedPlugins.methods.game;for(let n in t){let i=t[n];Bagel.internal.subFunctions.init.subMethods(e,i,n,e)}},subMethods:(e,t,n,i)=>{let r=!0;if(t.internal&&t.internal.isNotCategory&&(r=!1),r){i[n]||(i[n]={});for(let r in t)Bagel.internal.subFunctions.init.subMethods(e,t[r],r,i[n])}else{let r=!0;i.hasOwnProperty(n)&&(t.fn.overwrite||(r=!1,console.warn("Oops. We've got a conflict. Plugin "+JSON.stringify(t.internal.plugin.info.id)+" tried to overwrite the "+JSON.stringify(n)+" property in the game "+JSON.stringify(e.id)+' without having the correct tag. The overwrite has been blocked.\nIf you want to overwrite the older type definition, add this to the function JSON: "overwrite: true".'))),r&&((e,t,n,i)=>{e.fn.normal?i[n]=e.fn.fn:e.fn.obArg?i[n]=(i=>{null==i&&(console.error("Oops, this function takes one argument: an object. You didn't give any arguments."),Bagel.internal.oops(t)),"object"!=Bagel.internal.getTypeOf(i)&&(console.error("Huh, looks like you used "+Bagel.internal.an(Bagel.internal.getTypeOf(i))+" instead of an object."),Bagel.internal.oops(t)),Bagel.internal.saveCurrent(),current.game=t,current.plugin=e.internal.plugin,i=Bagel.check({ob:i,syntax:e.fn.args,where:"game "+t.id+"'s "+JSON.stringify(n)+" method"},Bagel.internal.checks.disableArgCheck);let r=e.fn.fn(t,i,current.plugin);return Bagel.internal.loadCurrent(),r}):i[n]=((...i)=>{let r=Object.keys(e.fn.args),s={};for(let e in i)null==r[e]&&(r[e]="Your "+Bagel.internal.th(parseInt(e))+" argument"),s[r[e]]=i[e];let a=Bagel.internal.current;Bagel.internal.saveCurrent(),a.game=t,a.plugin=e.internal.plugin,s=Bagel.check({ob:s,syntax:e.fn.args,where:"game "+t.id+"'s "+JSON.stringify(n)+" method"},Bagel.internal.checks.disableArgCheck);let o=e.fn.fn(t,s,e.internal.plugin);return Bagel.internal.loadCurrent(),o})})(t,e,n,i)}},initSprites:e=>{for(let t in e.game.sprites){Bagel.internal.createSprite(e.game.sprites[t],e,!1,"GameJSON.game.sprites item "+t,!1,parseInt(t))}},preload:e=>{null!=e.game.scripts.preload&&e.game.scripts.preload(e)},loadingScreen:e=>{if(!e.config.loading.skip){Bagel.internal.saveCurrent(),Bagel.internal.current.plugin=Bagel.internal.plugin;let t=Bagel.internal.deepClone(e.config.loading.animation);t.id=".Internal.loadingScreen."+e.id,t.width=e.width,t.height=e.height,t.config={loading:{skip:!0},display:{dom:!1}},null==t.vars&&(t.vars={}),t.vars.loading={progress:0,loaded:0,loading:e.internal.assets.loading,done:!1},t=Bagel.init(t),e.internal.loadingScreen=t,Bagel.internal.loadCurrent()}},documentReady:e=>{e.config.display.dom&&(e.config.display.htmlElementID?document.getElementById(e.config.display.htmlElementID).appendChild(e.internal.renderer.canvas):null!=document.body?document.body.appendChild(e.internal.renderer.canvas):document.appendChild(e.internal.renderer.canvas))}},loadPlugin:{check:(e,t)=>{let n=Bagel.internal.current;return Bagel.internal.saveCurrent(),n.plugin=t,n.game=e,t=Bagel.check({ob:t,syntax:Bagel.internal.checks.plugin,where:"plugin "+t.info.id},Bagel.internal.checks.disableArgCheck),Bagel.internal.loadCurrent(),t},merge:{types:{assets:(e,t)=>{let n=t.plugin.types.assets,i=e.internal.combinedPlugins;for(let r in n){let s=n[r];null==i.types.assets&&(i.types.assets={});let a=!1;if(null!=i.types.assets[r]?s.overwrite?a=!0:console.warn("Oops. We've got a conflict. Plugin "+JSON.stringify(t.info.id)+" tried to overwrite the "+JSON.stringify(r)+' asset type without having the correct tag. The overwrite has been blocked.\nIf you want to overwrite the older type definition, add this to the new type JSON: "overwrite: true".'):a=!0,a){i.types.assets[r]=s,i.types.assets[r].internal={plugin:t},i.types.internal.pluralAssetTypes[s.get.name]=r;let n=Bagel.internal.defaultFind;((t,i,r,s)=>{Bagel.get.asset[i.get.name]=((e,r,a)=>{let o=Bagel.internal.current;Bagel.internal.saveCurrent(),o.assetType=t,o.assetTypeName=i.get.name,o.game=null==r?o.game:r,o.plugin=s;let l=i.get.handler(e,a,n,o.game,s,t);return"string"==typeof l&&(console.error(l),Bagel.internal.oops(o.game)),Bagel.internal.loadCurrent(),l}),r.add.asset[i.get.name]=((t,n)=>{n||(n="the function Game.add.asset."+i.get.name);let s=e.internal.combinedPlugins.types.internal.pluralAssetTypes[i.get.name];Bagel.internal.loadAsset(t,r,s,n)})})(r,s,e,t)}}},sprites:(e,t)=>{let n=t.plugin.types.sprites,r=e.internal.combinedPlugins;for(let e in n){let s=n[e];null==r.types.sprites&&(r.types.sprites={});let a=!1;if(null!=r.types.sprites[e]?s.overwrite?a=!0:console.warn("Oops. We've got a conflict. Plugin "+JSON.stringify(t.info.id)+" tried to overwrite the "+JSON.stringify(e)+' sprite type without having the correct tag. The overwrite has been blocked.\nIf you want to overwrite the older type definition, add this to the new type JSON: "overwrite: true".'):a=!0,a){let n={...Bagel.internal.checks.sprite.clones.syntax};for(i in s.cloneArgs)n[i]=s.cloneArgs[i].syntax;s.args={...s.args,...Bagel.internal.checks.sprite.sprite},s.cloneArgs={...s.cloneArgs,...Bagel.internal.checks.sprite.clones.args},s.internal={plugin:t,cloneSyntax:n},r.types.sprites[e]=s}}}},method:(e,t,n,i,r,s,a,o)=>{let l=!1;null==r[a]?l=!0:s.overwrite?l=!0:i?console.warn("Oops. We've got a conflict. Plugin "+JSON.stringify(t.info.id)+" tried to overwrite the "+JSON.stringify(a)+" method for the "+i+' type without having the correct tag. The overwrite has been blocked.\nIf you want to overwrite the older method, add this to the method JSON: "overwrite: true".'):console.warn("Oops. We've got a conflict. Plugin "+JSON.stringify(t.info.id)+" tried to overwrite the "+JSON.stringify(a)+" "+n+' method without having the correct tag. The overwrite has been blocked.\nIf you want to overwrite the older method, add this to the method JSON: "overwrite: true".'),l&&(s.internal={plugin:t,isNotCategory:!0},"bagel"==n?s.fn.normal?o[a]=s.fn.fn:((e,t,n,i)=>{i.fn.obArg?o[t]=(e=>{null==e&&(e={}),"object"!=Bagel.internal.getTypeOf(e)&&(console.error("Huh, looks like you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e))+" instead of an object."),Bagel.internal.oops()),e=Bagel.check({ob:e,syntax:i.fn.args,where:"Bagel.js method "+JSON.stringify(t)},Bagel.internal.checks.disableArgCheck);let n=Bagel.internal.current;Bagel.internal.saveCurrent(),n.plugin=i.internal.plugin;let r=i.fn.fn(e,n.plugin);return Bagel.internal.loadCurrent(),r}):o[t]=((...e)=>{let n=Object.keys(i.fn.args),r={};for(let t in e)null==n[t]&&(n[t]="Your "+Bagel.internal.th(parseInt(t))+" argument"),r[n[t]]=e[t];r=Bagel.check({ob:r,syntax:i.fn.args,where:"Bagel.js method "+JSON.stringify(t)},Bagel.internal.checks.disableArgCheck);let s=Bagel.internal.current;Bagel.internal.saveCurrent(),s.plugin=i.internal.plugin;let a=i.fn.fn(r,s.plugin);return Bagel.internal.loadCurrent(),a})})(0,a,0,s):r[a]=s)},subMethods:(e,t,n,i,r,s,a,o)=>{let l=Bagel.internal.subFunctions.loadPlugin.merge;if(i.category){"bagel"==n&&(o[r]||(o[r]={}),o=o[r]),"sprite"!=n&&(s[r]||(s[r]={}),s=s[r]),a.push(r);for(let r in i.category)l.subMethods(e,t,n,i.category[r],r,s,a,o)}else if("sprite"==n)for(let d in i.fn.appliesTo){let u=s,c=i.fn.appliesTo[d];null==s[c]&&(s[c]={}),s=s[c];for(let e in a){let t=a[e];null==s[t]&&(s[t]={}),s=s[t]}l.method(e,t,n,c,s,i,r,o),s=u}else l.method(e,t,n,null,s,i,r,o)},methods:(e,t)=>{let n=e.internal.combinedPlugins,i=["bagel","game","sprite"];for(let r in i){let s=i[r],a=t.plugin.methods[s];for(let i in a){let r,o=a[i];r="sprite"==s?n.methods.sprite:n.methods[s],Bagel.internal.subFunctions.loadPlugin.merge.subMethods(e,t,s,o,i,r,[],Bagel)}}}}},createSprite:{check:(e,t,n,i,r)=>{let s=t.internal.combinedPlugins.types.sprites[e.type];if(n){e.type=n.type,e=Bagel.check({ob:e,where:i,syntax:s.internal.cloneSyntax},{args:!0,missing:!0});let t=Bagel.internal.deepClone;for(let i in s.cloneArgs){let r=s.cloneArgs[i];if("replace"==r.mode)e.hasOwnProperty(i)||(n.clones.hasOwnProperty(i)?e[i]=t(n.clones[i]):e[i]=t(n[i]));else if("merge"==r.mode){if(!(n.hasOwnProperty(i)||n.clones.hasOwnProperty(i)||e.hasOwnProperty(i))){e[i]=r.syntax.default;continue}e[i]=Object.assign(t(n[i]),t(n.clones[i]),t(e[i]))}else"ignore"==r.mode&&(e.hasOwnProperty(i)||(n.clones.hasOwnProperty(i)?e[i]=t(n.clones[i]):e[i]=r.syntax.default))}return e}Bagel.internal.current;let a=(e=Bagel.check({ob:e,where:i,syntax:n?s.internal.cloneSyntax:s.args},Bagel.internal.checks.disableArgCheck)).id.split(".")[1];return"."==e.id[0]&&(null==r?(console.error("This is awkward... IDs starting with a dot are only for plugins. You tried to use the id "+JSON.stringify(e.id)+". In "+i+".\nf it's important that it has this name, you could write a plugin instead, just make sure its id is set to "+JSON.stringify(a)+" ;)"),Bagel.internal.oops(t)):a!=r&&(console.error("Erm... the only reserved prefix you can use in this plugin is "+JSON.stringify("."+pluginID)+" and you tried to use the id "+JSON.stringify(e.id)+". In "+i+'.\nYou can fix this by changing the prefix, removing it or changing the plugin id in "Plugin.info.id".'),Bagel.internal.oops(t))),e},extraChecks:(e,t,n,i)=>{let r=t.internal.combinedPlugins.types.sprites[e.type];if(null==r.check)return;let s=Bagel.internal.current,a=r.check(e,t,Bagel.check,s.plugin,i,n);a&&(console.error(a),console.log("In "+n),Bagel.internal.oops(t))},init:(e,t)=>{let n=Bagel.internal.current;t.internal.combinedPlugins.types.sprites[e.type].init(e,t,n.plugin)},register:{scripts:(e,t,n,i)=>{let r,s=t.scripts[e],a=n.internal.scripts.index.sprites[e];for(let o in s)r=i?n.state:"all"==e?null:s[o].stateToRun,"all"==e?(a.push({script:o,sprite:t,isClone:t.isClone}),t.internal.scripts[e].push({id:a.length-1})):(null==a[r]&&(a[r]=[]),a[r].push({script:o,sprite:t,isClone:t.isClone}),t.internal.scripts[e].push({id:a[r].length-1,state:r}))},subMethods:(e,t,n,i,r)=>{let s=!0;if(e.internal&&e.internal.isNotCategory&&(s=!1),s){i[t]||(i[t]={});for(let s in e)Bagel.internal.subFunctions.createSprite.register.subMethods(e[s],s,n,i[t],r)}else((e,t,n,i,r)=>{let s=e.fn;s.normal?i[r]=s.fn:s.obArg?i[r]=(i=>{null==i&&(i={}),"object"!=Bagel.internal.getTypeOf(i)&&(console.error("Huh, looks like you used "+Bagel.internal.an(Bagel.internal.getTypeOf(i))+" instead of an object."),Bagel.internal.oops(n)),i=Bagel.check({ob:i,syntax:s.args,where:"the sprite "+t.id+"'s "+JSON.stringify(r)+" method"},Bagel.internal.checks.disableArgCheck);let a=Bagel.internal.current;Bagel.internal.saveCurrent(),a.sprite=t,a.game=n,a.plugin=e.internal.plugin;let o=s.fn(t,i,n,a.plugin);return Bagel.internal.loadCurrent(),o}):i[r]=((...i)=>{let a=Object.keys(s.args),o={};for(let e in i)null==a[e]&&(a[e]="Your "+Bagel.internal.th(parseInt(e))+" argument"),o[a[e]]=i[e];o=Bagel.check({ob:o,syntax:s.args,where:"the sprite "+t.id+"'s "+JSON.stringify(r)+" method"},Bagel.internal.checks.disableArgCheck);let l=Bagel.internal.current;Bagel.internal.saveCurrent(),l.sprite=t,l.game=n,l.plugin=e.internal.plugin;let d=s.fn(t,o,n,l.plugin);return Bagel.internal.loadCurrent(),d})})(e,n,r,i,t)},methods:(e,t)=>{let n=t.internal.combinedPlugins.methods.sprite[e.type];if(null!=n)for(let i in n)Bagel.internal.subFunctions.createSprite.register.subMethods(n[i],i,e,e,t)},listeners:(e,t,n)=>{let i=t.internal.combinedPlugins.types.sprites[e.type],r=i.listeners;e.internal.properties={};for(let n in r.property){let s=r.property[n];e.internal.properties[n]=e[n],((e,t,n,i,r)=>{Object.defineProperty(e,t,{get:()=>{if(null!=r.get){let s=Bagel.internal.current;Bagel.internal.saveCurrent(),s.sprite=e,s.game=n,s.plugin=i;let a=r.get(e.internal.properties,e.internal.properties[t],t,n,i,e);a&&(console.error(a),Bagel.internal.oops(n)),Bagel.internal.loadCurrent()}return e.internal.properties[t]},set:s=>{if(e.internal.properties[t]=s,null!=r.set){let a=Bagel.internal.current;Bagel.internal.saveCurrent(),a.sprite=e,a.game=n,a.plugin=i;let o=r.set(e.internal.properties,s,t,n,i,e);o&&(console.error(o),Bagel.internal.oops(n)),Bagel.internal.loadCurrent()}}})})(e,n,t,i.internal.plugin,s)}}}},tick:{scripts:(e,t,n)=>{if(null==Bagel.internal.games[n.id])return;let i;if(null!=(i=t?"all"==e?n.internal.scripts.index.sprites[e]:n.internal.scripts.index.sprites[e][n.state]:"all"==e?n.internal.scripts.index[e]:n.internal.scripts.index[e][n.state]))for(let r in i){let s=i[r];if(null!=s)if(t){let t,i=s.sprite;Bagel.internal.current.sprite=i,"init"==e&&(i.visible=!0),"function"==typeof(t="all"==e||i.isClone?i.scripts[e][s.script]:i.scripts[e][s.script].code)&&t(i,n,Bagel.step)}else{let t;(t="all"==e?n.game.scripts[e][s.script]:n.game.scripts[e][s.script].code)(n,Bagel.step)}}},hideSprites:e=>{let t=e.game.sprites,n=0;for(;n<t.length;){let e=t[n];null!=e?(e.isClone?e.delete():0==e.scripts.all.length&&(e.visible=!1),n++):n++}},render:{ctx:e=>{let t=e.internal.renderer,n=t.canvas,i=t.ctx,r=n.width/e.width,s=n.height/e.height,a=t.layers,o=e.internal.combinedPlugins.types.sprites;i.fillStyle="white",i.fillRect(0,0,n.width,n.height);for(let t in a){let l=e.game.sprites[a[t]],d=o[l.type];l.visible&&null!=d.render&&d.render.ctx(l,i,n,e,d.internal.plugin,r,s)}},webgl:e=>{}},loaded:e=>{let t=Bagel.internal.subFunctions.tick;if(!e.paused){if(e.state!=e.internal.lastState&&(t.hideSprites(e),t.scripts("init",!0,e),t.scripts("init",!1,e),e.internal.lastState=e.state),t.scripts("main",!0,e),t.scripts("main",!1,e),t.scripts("all",!0,e),t.scripts("all",!1,e),null==Bagel.internal.games[e.id])return;t.render[e.config.display.renderer](e)}},loading:e=>{if(!e.config.loading.skip){let t=e.internal.renderer,n=t.canvas,i=t.ctx,r=e.internal.loadingScreen,s=e.internal.assets,a=r.vars.loading;a.progress=s.loaded/(s.loading+s.loaded)*100,a.loaded=s.loaded,a.loading=s.loading,i.clearRect(0,0,n.width,n.height),i.drawImage(r.internal.renderer.canvas,0,0,n.width,n.height),r.vars.loading.done&&(e.loaded=!0,r.delete())}},tick:()=>{Bagel.internal.requestAnimationFrame.call(window,Bagel.internal.tick)},scaleCanvas:e=>{let t=window.innerWidth,n=window.innerHeight,i=e.internal.renderer.ratio,r=t/i;n>r?n=r:n!=r&&(t=n*i),t*=window.devicePixelRatio,n*=window.devicePixelRatio;let s=e.internal.renderer,a=s.canvas;a.width==t&&a.height==n||(a.width=t,a.height=n,a.style.removeProperty("width"),a.style.setProperty("width",t/window.devicePixelRatio+"px","important"),a.style.removeProperty("height"),a.style.setProperty("height",n/window.devicePixelRatio+"px","important"),s.ctx.imageSmoothingEnabled=!1)}},delete:{layers:(e,t)=>{let n=t.internal.renderer,i=n.layers.indexOf(e.idIndex);n.layers=n.layers.filter((e,t)=>t!=i)},scripts:(e,t,n)=>{let r=t.internal.scripts[e];if(0==Object.keys(r).length)return;let s=n.internal.scripts.index.sprites[e];for(let t in r){let n=r[t];"all"==e?s[n.id]=null:s[n.state][n.id]=null}let a=[];for(i in s){let t=0;"all"!=e&&(a=[]);let n="all"==e?"a":s[i];for(let r in n){let o;null==(o="all"==e?s[i]:n[r])?t++:("all"==e?o.sprite.internal.scripts[o.script].id-=t:o.sprite.internal.scripts[e][o.script].id-=t,a.push(o))}"all"!=e&&(s[i]=a)}"all"==e&&(n.internal.scripts.index.sprites[e]=a)},misc:(e,t)=>{t.game.sprites[e.idIndex]=null,t.internal.idIndex[e.id]=null,e.isClone&&(e.parent.cloneCount--,e.parent.cloneIDs[e.parent.cloneIDs.indexOf(e.id)]=null)}}},standardChecks:{asset:{id:e=>{let t=Bagel.internal.current.game,n=Bagel.internal.current.asset,r=Bagel.internal.current.assetType;if(e=null==e?"id":e,null!=t.internal.assets.assets[r][n[e]])return"Oh no! You used an id for an asset that's already being used. Maybe try something else.\nYou used "+JSON.stringify(t.game.assets[r][i][e])+" in GameJSON.game.assets."+r+" item "+index+"."},isInternal:(e,t)=>{let n=Bagel.internal.current,i=n.asset,r=(n.assetType,n.where),s=Bagel.internal.currentStack,a=0==s.length?null:s[s.length-1].plugin;a&&(a=a.info.id),e=null==e?"isInternal":e;let o=i[t=null==t?"id":t].split(".")[1];if("."==i[t][0]){if(null==a)return"This is awkward... IDs starting with a dot are only for plugins. In "+r+".\nIf it's important that it has this name, you could write a plugin instead, just make sure its id is set to "+JSON.stringify(o)+" ;)";if(o!=a)return"Erm... the only reserved prefix you can use in this plugin is "+JSON.stringify("."+a)+" and you tried to use the id "+JSON.stringify(i[t])+". In "+r+'.\nYou can fix this by changing the prefix, removing it or changing the plugin id in "Plugin.info.id".'}}}},checks:{game:{id:{required:!0,check:e=>{if(null!=Bagel.internal.games[e])return"Oh no! You used an id for your game that is already being used. Try and think of something else.\nYou used "+JSON.stringify(e)+' in "GameJSON.id".';Bagel.internal.current;let t=e.split(".")[1],n=Bagel.internal.currentStack,i=0==n.length?null:n[n.length-1].plugin;i&&(i=i.info.id),"."==e[0]&&(null==i?(console.error("This is awkward... IDs starting with a dot are only for plugins. You tried to use the id "+JSON.stringify(e)+". In GameJSON.id.\nIf it's important that it has this name, you could write a plugin instead, just make sure its id is set to "+JSON.stringify(t)+" ;)"),Bagel.internal.oops()):t!=i&&(console.error("Erm... the only reserved prefix you can use in this plugin is "+JSON.stringify("."+i)+" and you tried to use the id "+JSON.stringify(e)+'In GameJSON.id.\nYou can fix this by changing the prefix, removing it or changing the plugin id in "Plugin.info.id".'),Bagel.internal.oops()))},types:["string"],description:"An id for the game canvas so it can be referenced later in the program."},width:{required:!1,default:800,types:["number"],description:"The virtual width for the game. Independent from the rendered width."},height:{required:!1,default:450,types:["number"],description:"The virtual height for the game. Independent from the rendered height."},game:{required:!1,default:{},types:["object"],description:"Where most of the properties are.",subcheck:{assets:{required:!1,default:{},types:["object"],description:"The assets you want to load for your game, organised by type. e.g imgs: [<asset1>,<asset2>]"},sprites:{required:!1,default:[],types:["array"],description:"The array that contains the all the sprite JSON."},scripts:{required:!1,default:{},subcheck:{init:{required:!1,default:[],arrayLike:!0,subcheck:{code:{required:!0,types:["function"],description:'The code to be run when the "stateToRun" property matches the game state.'},stateToRun:{required:!0,types:["string"],description:"The state when this script will be run."}},types:["array"],description:"Init scripts. They run on a state change."},main:{required:!1,default:[],arrayLike:!0,subcheck:{code:{required:!0,types:["function"],description:'The code to be run when the "stateToRun" property matches the game state.'},stateToRun:{required:!0,types:["string"],description:"The state when this script will be run."}},types:["array"],description:"Main scripts. They run every frame where the states match."},all:{required:!1,default:[],arrayLike:!0,check:e=>{if("function"!=typeof e)return"Huh. This should be a function but you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e))+"."},checkEach:!0,types:["array"],description:'"All" scripts. They run every frame regardless of game state.'}},types:["object"],description:'The object that contains all the game scripts ("init" and "main") that aren\'t for a sprite.'}}},state:{required:!0,types:["string"],description:"The game's initial state. Game states control which sprites are active."},config:{required:!1,default:{},subcheck:{display:{required:!1,default:{},types:["object"],check:e=>["fill","static"].includes(e.mode)?["auto","canvas","webgl"].includes(e.renderer)?null==document.getElementById(e.htmlElementID)&&null!=e.htmlElementID?'Oops, you specified the element to add the game canvas to but it doesn\'t seem to exist.\nThis is specified in "GameJSON.config.display.htmlElementID" and is set to '+JSON.stringify(e.htmlElementID)+". You might want to check that the HTML that creates the element is before your JavaScript.":void 0:"Oops. You used an invalid option in GameJSON.config.display.renderer. You used "+e.renderer+', it can only be either "auto", "canvas" or "webgl".':"Oops! You used an invalid option in GameJSON.config.display.mode. You used "+e.mode+', it can only be either "fill" or "static".',checkEach:!1,subcheck:{mode:{required:!1,default:"fill",types:["string"],description:"The display mode. e.g static (always the same size) or fill (fills the whole window)."},renderer:{required:!1,default:"auto",types:["string"],description:'The renderer for this game. Either "auto", "canvas" or "webgl". "auto" will use WebGL if it\'s supported by the browser, otherwise it\'ll use the basic 2d renderer (slower).'},dom:{required:!1,default:!0,types:["boolean"],description:"If the canvas should be part of the DOM or not."},htmlElementID:{required:!1,types:["string"],description:"An element to append the canvas to. If unspecified, it will be added to the document or body."}},description:"Contains a few options for how the game is displayed."},loading:{required:!1,default:{},subcheck:{mode:{required:!1,default:"dynamic",check:e=>{if(!["preload","dynamic"].includes(e))return'Oh no! This only accepts "preload" and "function" but you used '+JSON.stringify(e)+"."},types:["string"],description:'How assets should be loaded. Either "preload" or "dynamic". Preload loads all the assets before the game runs and dynamic only loads the assets when they\'re requested internally or by using the get function. A loading screen will show for those assets if they were requested on the first frame after a state change. Assets requested any other time won\'t trigger a loading screen.'},skip:{required:!1,default:!0,types:["boolean"],description:"If the loading screen should be skipped or not. If true, nothing will show until the game's loaded. This can annoy the user as it delays the page load but if it's short enough it saves time because they don't have to wait for the loading animation to finish."},animation:{required:!1,default:{game:{assets:{imgs:[{id:"Bagel",src:"assets/imgs/bagel.png"}]},sprites:[{id:"Bagel",type:"canvas",fullRes:!0,scripts:{init:[{code:e=>{e.vars.img=Bagel.get.asset.img("Bagel")},stateToRun:"loading"}]},render:(e,t,n,i)=>{let r=e.vars.img,s=i.width/2;if(n.fillStyle="white",n.imageSmoothingEnabled=!1,n.clearRect(0,0,i.width,i.height),0==t.vars.stage){n.drawImage(r,0,0,i.width,i.height);let e=t.vars.loading.progress/100*360-90;if(e>t.vars.angle&&(t.vars.velocity+=2,t.vars.angle+=t.vars.velocity,t.vars.velocity*=.9,e<t.vars.angle&&(t.vars.velocity=0,t.vars.angle=e)),0==t.vars.loading.loading&&0==t.vars.velocity)return void t.vars.stage++;n.moveTo(s,s),n.arc(s,s,2*s,Bagel.maths.degToRad(-90),Bagel.maths.degToRad(t.vars.angle),!0),n.lineTo(s,s),n.fill(),n.setTransform(1,0,0,1,0,0)}else 0==t.vars.delay?(t.vars.velocity+=1,e.width-=t.vars.velocity,e.height-=t.vars.velocity,t.vars.velocity*=.9,n.drawImage(r,0,0,i.width,i.height),e.width<=0&&(e.width=1,e.height=1,n.clearRect(0,0,1,1),t.vars.delay++)):(t.vars.delay++,t.vars.delay>10&&(t.vars.loading.done=!0))},width:(e,t)=>Math.max(t.width,t.height)/5,height:(e,t)=>Math.max(t.width,t.height)/5},{id:"Text",type:"canvas",fullRes:!0,scripts:{init:[{code:e=>{e.y+=Bagel.get.sprite("Bagel").height/2,e.y+=e.height/2},stateToRun:"loading"}]},render:(e,t,n,i)=>{n.font=i.height/2+"px Helvetica",n.textBaseline="middle";n.fillText("Loading",i.width/2-n.measureText("Loading").width/2,i.height/2)},width:(e,t)=>t.width,height:(e,t)=>t.height/10}]},state:"loading",vars:{angle:-90,velocity:0,stage:0,delay:0}},types:["object"],description:"The loading screen animation. Defaults to a Bagel themed one.\nIt's a game object and works exactly the same as a game except its loading screen is disabled, Game.vars.loading is automatically created and the id, width, height and config given for the game is ignored. Game.vars.loading contains the following:\n  progress -> The percentage of the assets loaded\n  loaded -> The number of assets loaded\n  loading -> The number currently loading\n  done -> Starts as false, set this to true when you're done (loaded should be 0 when you do this)"}},types:["object"],description:"A few options for how Bagel.js should handle loading assets."}},types:["object"],description:"A bunch of other options for the game."},internal:{required:!1,default:{},types:["object"],description:"Very hush hush. (Contains stuff that Bagel.js needs to make the game work)"},vars:{required:!1,default:{},types:["object"],description:"Can be used to store variables for the game."}},sprite:{sprite:{id:{required:!0,types:["string"],description:"The id for the sprite to be targeted by."},type:{required:!0,types:["string"],description:"The type of sprite."},clones:{required:!1,default:{},types:["object"],description:"The default data for a clone of this sprite.\nAll arguments are optional as the clone will adopt the arguments from the clone function and the parent sprite (in that priority)"},scripts:{required:!1,default:{},subcheck:{init:{required:!1,default:[],types:["array"],description:"Contains init scripts. They run when the game state first changes to the script's state."},main:{required:!1,default:[],types:["array"],description:"Contains main scripts. They run for every frame where the script's state and the game's state match."},all:{required:!1,default:[],types:["array"],description:'Contains "all" scripts. They run on every frame and aren\'t affected by the game state.'},steps:{required:!1,default:{},types:["object"],description:"Contains steps: mini scripts that can be called from scripts. The key is the id and the value is the function."}},types:["object"],description:"The sprite's scripts."},vars:{required:!1,default:{},types:["object"],description:"An object you can use to store data for the sprite."}},clones:{syntax:{id:{required:!1,types:["string"],description:"The id for the clone to be targeted by. Defaults to the parent's id followed by a hashtag and then the lowest number starting from 0 that hasn't already been used."},type:{required:!0,types:["string"],description:"The type of clone."},clones:{required:!1,default:{},types:["object"],description:"The default data for a clone of this clone.\nAll arguments are optional as the clone will adopt the arguments from the clone function and the parent sprite (in that priority)"},scripts:{required:!1,default:{},subcheck:{init:{required:!1,default:[],types:["array"],check:e=>{if("function"!=typeof e)return"Oops. Looks like you used the wrong type, you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e))+" instead of a function."},checkEach:!0,description:"An array of functions to run when this clone is initialised."},main:{required:!1,default:[],types:["array"],description:"An array of functions to run on every frame for this clone."}},types:["object"],description:"The clones's scripts."},vars:{required:!1,default:{},types:["object"],description:"An object you can use to store data for the clone."}},args:{id:{syntax:{description:"The id for the clone to be targeted by. Defaults to the parent's id followed by a hashtag and then the lowest number starting from 0 that hasn't already been used."},mode:"replace"},type:{syntax:{required:!0,types:["string"],description:"The type of clone."},mode:"replace"},clones:{syntax:{required:!1,default:{},types:["object"],description:"The default data for a clone of this clone.\nAll arguments are optional as the clone will adopt the arguments from the clone function and the parent sprite (in that priority)"},mode:"ignore"},scripts:{syntax:{subcheck:{init:{required:!1,default:[],types:["array"],check:e=>{if("function"!=typeof e)return"Oops. Looks like you used the wrong type, you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e))+" instead of a function."},checkEach:!0,description:"An array of functions to run when this clone is initialised."},main:{required:!1,default:[],types:["array"],description:"An array of functions to run on every frame for this clone."}},description:"The clones's scripts.",default:{}},mode:"ignore"},vars:{syntax:{description:"An object you can use to store data for the clone."},mode:"merge"}}}},plugin:{info:{required:!0,types:["object"],subcheck:{id:{required:!0,types:["string"],description:"The unique id for the plugin."},description:{required:!0,types:["string"],description:"A brief description of what the plugin is and what it does."}},description:"Contains some information about the plugin."},plugin:{required:!1,subcheck:{types:{required:!1,default:{},subcheck:{assets:{required:!1,default:{},arrayLike:!0,subcheck:{args:{required:!0,types:["object"],description:["The required and optional arguments for the sprite. Is an object where the key is the argument name. e.g {","    x: {","        required: false,",'        default: "centred",',"        types: [",'            "number",','            "string",','            "function",',"        ],",'        description: "The X position for the sprite. Can also be set to "centred" to centre it along the X axis, or set to a function that returns a position when the game loads. e.g:\n"(me, game) => game.width - 50"',"    }","}"].join("\n")},description:{required:!0,types:["string"],description:"The description of this asset type, make this short and clear to help people when they use the wrong syntax."},check:{required:!0,types:["function"],description:["Your check function for this asset type. ","A good check function will avoid a standard JavaScript error when the user inputs something wrong (e.g a can't read property X of null error).","\nFortunately, Bagel.js helps you out in a few ways:\n",'  You can use the check function provided (while the check function is being run) to easily check an object to make sure it has the desired properties as well as setting defaults. (works in the same way as the "args" argument.)\n','  You should also make use of the "args" argument as you can easily choose which data types you want to allow for each arguments as well as setting defaults and required arguments.\n','  "standardChecks" has, well... some standard checks. If you want to make sure an id isn\'t used twice use "standardChecks.id(<whichever argument is used for the id (defaults to "id")>)". ','  You might also want to use the "isInternal" check with the arguments working the same as the previous but also having a second argument for the isInternal argument. This might be useful if you want to reserve some IDs for plugins as it\'ll block any IDs starting with a dot and without the asset having "isInternal" set to true.\n',"  You probably want to use it like this:\n","    let error = standardChecks.id();\nif (error) return error;",'  And if you find any problems with the user input, just use the return statement in the check function (e.g return "Error";) and Bagel.js will stop what it\'s doing, throw the error you specified and pause the game.\n',"Some tips on making custom errors though:\n","  Always specifiy where the error is! Bagel.js will say which game it's in but, you know more than it about the error. You should specify which type they were making, the index of the problematic error and ideally how to fix it.\n","  Also, try to include information about the inputs the user provided. For example, if they used a duplicate ID, say what that id was in the error itself.\n","  Lastly, be nice to the programmer. Treat them like a user. It's helpful to know that you can just put in something you know's wrong and get a helpful mini-tutorial.\n","\nOne more thing: the arguments for the function is structured like this:","(asset, game, check, standardChecks, plugin, index) => {\n};\n","Where standardChecks contains functions and check is a function that checks objects.","\n\nGood luck! :P"].join("")},init:{required:!0,types:["function"],description:["Where you make the asset object. When it's ready, simply use the \"ready\" function to tell Bagel.js that the asset's loaded.","Here's an example:","(asset, ready, game, plugin, index) => {","    let img = new Image();","    img.onload = () => {","        ready({;","            img: img,","            JSON: asset","        });","    };","};"].join("\n")},get:{required:!0,subcheck:{name:{required:!0,types:["string"],description:'The name of the function. Usually the singular version of the asset type. e.g: the type "imgs" would have the name "img" so the function would be "Game.get.asset.img". Defaults to the name of type.'},handler:{required:!1,default:(e,t,n,i,r,s)=>n(e,t),types:["function","undefined"],description:'The handler function for the "get" method. Defaults to using defaultFind.\nThe function should return the asset specified by the arguments. Or an error in the form of a string.'}},types:["object"],description:["Contains the name of the function and the function that gets the asset. e.g {",'    name: "img"',"}"].join("\n")}},types:["object"],description:"Contains the new asset types, the key is the name of type. (should be plural)"},sprites:{required:!1,default:{},arrayLike:!0,subcheck:{description:{required:!0,types:["string"],description:"A short explaination of what this sprite type does."},args:{required:!0,types:["object"],description:'Same as the "syntax" argument for the check function. These checks are only run on original sprites, not clones.'},cloneArgs:{required:!0,types:["object"],arrayLike:!0,subcheck:{syntax:{required:!1,default:{},subcheck:{description:{required:!1,check:(e,t,n,i,r)=>{null==e&&(t[n]=r.prev.ob.args[r.prevName].description)},types:["string"],description:"A brief description of what this property does. You might want to change this to mention clones instead of sprites."},types:{required:!1,check:(e,t,n,i,r)=>{null==e&&(t[n]=r.prev.ob.args[r.prevName].types)},types:["array"],description:"The different data types this property accepts. e.g string, array, object etc."},required:{required:!1,check:(e,t,n,i,r)=>{null==e&&(t[n]=r.prev.ob.args[r.prevName].required)},types:["boolean"],description:"If the argument is required or not. Most of the time, it should be optional."},check:{required:!1,check:(e,t,n,i,r)=>{null==e&&(t[n]=r.prev.ob.args[r.prevName].check)},types:["function","undefined"],description:"The check function."},subcheck:{required:!1,check:(e,t,n,i,r)=>{null==e&&(t[n]=r.prev.ob.args[r.prevName].subcheck)},types:["object","undefined"],description:'The subcheck. Same as a "syntax" argument.'},default:{required:!1,check:(e,t,n,i,r)=>{null==e&&(t[n]=r.prev.ob.args[r.prevName].default)},types:"any",description:'The default value for when "ignore" mode is used and no value is found for a property.'}},types:["object"],description:'The syntax for clones of this sprite type. Any unspecified arguments will default to the values specified in the "args" argument for normal sprites.'},mode:{required:!1,default:"replace",check:e=>{if(!["replace","merge","ignore"].includes(e))return'Huh, looks like you used an invalid option for this. It can only be "replace", "merge" or "ignore".'},types:["string"],description:["The adoption method for this property. Either:",'  • "replace" -> The value is given based on the order of preference (from high to low): the "clone" function inputs, the "clones" attribute in the parent and the parent sprite\'s properties.','  • "merge" -> Only for objects and arrays. They are merged together, in the event of a conflict, the order of preference applies.','  • "ignore" -> Ignores the parent\'s properties. However, properties will still be taken from the parent\'s "clones" argument and the "clone" function using the order of preference. The property will be set to the default from either the parent or the clone\'s arguments if no value is assigned.'].join("\n")}},description:'Same as the "syntax" argument for the check function. These checks are only run on clones, not original sprites. Unspecified properties will mean that the property doesn\'t exist for clones.'},listeners:{required:!1,default:{},subcheck:{steps:{required:!1,default:{},types:["object"],description:'Short functions that do a task. Can be called from any of the other functions using "Bagel.step(<step id>)".'},fns:{required:!1,default:{},types:["object"],description:"Functions that can replace the functions in listeners. The key is the id for it. The id can be used in place of this function in listeners."},property:{required:!1,default:{},subcheck:{set:{required:!1,default:null,check:(e,t,n,i,r)=>{if("string"==typeof e){if(!r.ob.fns.hasOwnProperty(e))return"Huh, looks like you used an invalid id for a function. You used "+JSON.stringify(e)+".";t[n]=r.ob.fns[e]}},types:["function","string"],description:"A function that's run after the property is changed. Can also be the name of a function defined in SpriteJSON.listeners.fns. The arguments given are these: sprite, value, property, game, plugin and triggerSprite."},get:{required:!1,default:null,check:(e,t,n,i,r)=>{if("string"==typeof e){if(!r.ob.fns.hasOwnProperty(e))return"Hmm, looks like you used an invalid id for a function. You used "+JSON.stringify(e)+".";t[n]=r.ob.fns[e]}},types:["function","string"],description:"A function that's run before the value is sent back to the code that requested it. Can also be the name of a function defined in SpriteJSON.listeners.fns. The arguments given are these: sprite, value, property, game, plugin and triggerSprite."}},arrayLike:!0,types:["object"],description:'Contains the "set" and "get" listener functions.'}},types:["object"],description:"Functions that can run when certain conditions are met."},check:{required:!1,default:null,types:["function"],description:"A function that does extra checks. Use return <error message> in the function to create an error. These are the arguments given: sprite, game, check, index, where"},init:{required:!1,default:null,types:["function"],description:"Initialises the sprite. Is a function. Can be used to define attributes. These are the arguments given: sprite, game and plugin."},render:{required:!1,default:{},subcheck:{ctx:{required:!1,default:null,types:["function"],description:"The ctx render function. Runs every frame."},webgl:{required:!1,default:{},subcheck:{shaders:{required:!1,default:{},subcheck:{vertex:{required:!1,default:[],types:["array"],description:"An array of vertex shaders to run from first to last."},fragment:{required:!1,default:[],types:["array"],description:"An array of fragment shaders to run from first to last."}},types:["object"],description:'Contains the "vertex" and "fragment" shaders.'}},types:["object"],description:'The webgl renderer. Runs every frame. Contains "shaders" and an optional "render" function which allows for extra processing before the vertex and fragment shaders are run.'}},types:["object"],description:"The render functions for this sprite type. Ideally should have both a webgl renderer and a fallback ctx renderer."}},types:["object"],description:"Contains the new sprite types, the key is the name of type. (should be singular)"}},types:["object"],description:"Creates new types. (assets and sprites)"},assets:{required:!1,default:{},types:["object"],description:"Which assets to load for the plugin."},methods:{required:!1,default:{},subcheck:{bagel:{required:!1,default:{},arrayLike:!0,subcheck:{fn:{required:!1,subcheck:{args:{required:!0,types:["object"],description:'The syntax for the arguments. These is always an object, even if you set "obArg" to false.'},fn:{required:!0,types:["function"],description:"The method itself. The arguments are the arguments (an object) and the plugin."},obArg:{required:!0,types:["boolean"],description:"If the arguments should be inputted as an object or should use a normal function input. You probably only want to use the 2nd one if there aren't many arguments."},category:{required:!1,default:"",types:["string"],description:'If specified, an object will be created in "Bagel" and this method will be in this object. This is good for grouping functions. You can also chain multiple categories by separating them with a dot.'}},types:["object"],description:"The method itself."},category:{required:!1,types:["object"],description:"Contains categories where the key is the name of the category and their contents have the same syntax as here. Note: These aren't checked."}},types:["object"],description:"Contains framework functions. (Bagel.<function>...) The key is the name and the value is the function."},game:{required:!1,default:{},arrayLike:!0,types:["object"],description:"Contains game functions. (Game.<function>...) The key is the name and the value is the function."},sprite:{required:!1,default:{},types:["object"],description:"Contains sprite functions. (me.<function>...) The key is the name and the value is the function."}},types:["object"],description:'Contains the 3 different method types: "bagel", "game" and "sprite".'},scripts:{required:!1,default:{},subcheck:{preload:{required:!1,default:[],check:e=>{if("function"!=typeof e)return"Hmm. Looks like you used the wrong type, it should be a function and you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e)+".")},checkEach:!0,types:["array"],description:"Preload functions. They run before the plugin is checked or initialised."},init:{required:!1,default:[],check:e=>{if("function"!=typeof e)return":/ Looks like you used the wrong type, it should be a function and you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e)+".")},checkEach:!0,types:["array"],description:"Init functions. They run once the plugin's been checked and mostly initialised. This function finishes it by doing stuff specific to this plugin."},main:{required:!1,default:[],check:e=>{if("function"!=typeof e)return"Hmm, looks like you used the wrong type, it should be a function and you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e)+".")},checkEach:!0,types:["array"],description:"Main functions. They run on every frame before the rendering."},steps:{required:!1,default:{},check:e=>{if("function"!=typeof e)return"Huh, looks like you used the wrong type, it should be a function and you used "+Bagel.internal.an(Bagel.internal.getTypeOf(e)+".")},checkEach:!0,types:["object"],description:'Mini functions. They can help make your code clearer by spitting functions into the individual steps. Can use them with "Bagel.step" or the step function provided with the script.'}},types:["object"],description:'Contains the plugin\'s scripts. "preload", "init" and "main". Steps can also be used.'},sprites:{required:!1,default:[],subcheck:{},types:["array"],description:"Contains the plugin's sprites. Works the same way as Game.game.sprites. These will be created in every game where the plugin's active."}},types:["object"],description:"Contains most of the plugin stuff. e.g the new types it adds, methods and defaults."},vars:{required:!1,default:{},types:["object"],description:"An object you can use to store data for the sprite."}},disableArgCheck:{args:!0}},defaultFind:(e,t)=>{if(null==e)return'Huh, looks like you forgot the "id" argument for the "defaultFind" function.';let n=Bagel.internal.current,i=n.game.internal.assets.assets[n.assetType];return null==i[e]?!t&&"Oops. That asset doesn't exist. You tried to get the asset with the id "+JSON.stringify(e)+".":i[e][n.assetTypeName]},th:e=>e+1+(e>8&&e<20?"th":["st","nd","rd","th","th","th","th","th","th"][parseInt(e.toString()[e.toString().length-1])]),an:e=>["a","e","i","o","u"].includes(e[0].toLowerCase())?"an "+e:"a "+e,list:(e,t,n)=>{let i="";for(let n in e){let r=e[n];i+=Bagel.internal.an(r),n==e.length-2?i+=" "+t+" ":n!=e.length-1&&(i+=", ")}return i},getTypeOf:e=>Array.isArray(e)?"array":null==e?"undefined":typeof e,deepClone:e=>{if("object"!=typeof e||null==e)return e;let t;t=Array.isArray(e)?[]:{};let n=Object.keys(e),i=0;for(;i<n.length;)"object"==typeof e[n[i]]?t[n[i]]=Bagel.internal.deepClone(e[n[i]]):t[n[i]]=e[n[i]],i++;return t},findCloneID:(e,t)=>{for(let t in e.cloneIDs)if(null==e.cloneIDs[t])return t;return e.cloneIDs.length},findSpriteID:e=>{for(let t in e.game.sprites)if(null==e.game.sprites[t])return parseInt(t);return e.game.sprites.length},oops:e=>{if(null==e)throw"Critical Bagel.js error, please look at the error above for more info. ^-^";throw e.paused=!0,"Critical Bagel.js error in the game "+JSON.stringify(e.id)+", look at the error for some help. ^-^"},current:{sprite:null,game:null,asset:null,assetType:null,assetTypeName:null,i:null,where:null,plugin:null},saveCurrent:()=>{let e=Bagel.internal;e.currentStack.push({...e.current})},loadCurrent:()=>{let e=Bagel.internal;e.current=e.currentStack.pop()},currentStack:[],requestAnimationFrame:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame,debug:{add:e=>{Bagel.internal.debug.queue.push(e)},warn:e=>Bagel.internal.debug.add(["warning",e]),log:e=>Bagel.internal.debug.add(["log",e]),send:()=>{let e=Bagel.internal.debug.queue;if(0==e.length)return;let t=Bagel.internal.debug.logList,n=JSON.stringify(e);if(!t.includes(n)){t.push(n);for(let t in e){let n=e[t];"warning"==n[0]?console.warn(n[1]):console.log(n[1])}}Bagel.internal.debug.queue=[]},queue:[],logList:[]},games:{}},check:(e,t,n,i)=>{if(t||(t={}),e.prev||t.args||(e=Bagel.check({ob:e,where:n||"the check function. (Bagel.check)",syntax:{ob:{required:!0,types:["object","array"],description:"The object or array of objects to check."},where:{required:!0,types:["string"],description:"A description of what it's checking."},syntax:{required:!0,types:["object"],description:["The syntax for the object. e.g {",'    // "foo" is the argument name',"    foo: {",'        required: true, // If the "foo" argument is required or not.','        //default: "foo", // If it\'s not required, it needs a default','        types: ["string"], // The different data types to accept. e.g array, object, string, number etc.','        description: "foo" // A clear and to the point explaination of what this argument does',"    }","}"].join("\n")},game:{required:!1,default:Bagel.internal.current.game,types:["object"],description:"The game object. Optional if this is being run in a script."}}},Bagel.internal.checks.disableArgCheck,null,!0)),t.missing&&t.types&&t.useless)return e.ob;e.hasOwnProperty("game")||(e.game=Bagel.internal.current.game);let r,s=Bagel.internal.debug,a=["array","string"],o=[],l=[],d=[],u=[];r=t.missing?e.ob:{...e.ob,...e.syntax};for(let n in r){let i=e.syntax[n],r=e.ob[n];if(null==i){t.useless||o.push(n);continue}if("ignore"==i)continue;let s=!1;e.ob.hasOwnProperty(n)||(i.required?l.push(n):(e.ob[n]=i.default,r=e.ob[n],s=!0)),t.types||s||0!=l.length||(null==i.types&&(console.error("The syntax for "+e.where+"."+n+' is missing the "types" argument.'),console.log("In "+e.where+"."),console.log("Syntax:"),console.log(i),Bagel.internal.oops(e.game)),a.includes(Bagel.internal.getTypeOf(i.types))||(console.error("The syntax for "+e.where+"."+n+' has the wrong data type for the "types" argument. You used '+Bagel.internal.an(Bagel.internal.getTypeOf(i.types))+"."),console.log("In "+e.where+"."),console.log("Syntax:"),console.log(i),Bagel.internal.oops(e.game)),i.types.includes(Bagel.internal.getTypeOf(r))||"any"==i.types||d.push(n)),(i.subcheck||i.check)&&u.push(n)}let c=0!=l.length||0!=d.length;if(o.length>0&&(1==o.length?s.warn("Oops, looks like you used an unsupported argument"+(c?"":" in "+e.where)+": "+JSON.stringify(o[0])+". You can leave this alone if you want, but it doesn't need to be there."):s.warn("Hmm, looks like you used some unsupported arguments"+(c?"":" in "+e.where)+":\n  • "+o.map((e,t)=>JSON.stringify(e)).join("\n  • ")+"\n\nYou can leave these if you want, but they don't need to be there.")),l.length>0&&(1==l.length?console.error("Hmm, looks like you forgot the "+JSON.stringify(l[0])+" argument."):console.error("Whelp, looks like you forgot some arguments:\n"+l.map(t=>"  • "+JSON.stringify(t)+" -> "+e.syntax[t].description).join("\n"))),d.length>0&&(1==d.length?console.error(":/ looks like you used the wrong type for the "+JSON.stringify(d[0])+" argument. You used "+Bagel.internal.an(Bagel.internal.getTypeOf(e.ob[d[0]]))+" instead of "+Bagel.internal.list(e.syntax[d[0]].types,"or",!0)+"."):console.error("Hmm, looks like you got some types wrong:\n"+d.map((t,n)=>"  • "+JSON.stringify(t)+" -> Should be "+Bagel.internal.list(e.syntax[t].types,"or",!0)+". You used "+Bagel.internal.an(Bagel.internal.getTypeOf(e.ob[d[n]]))+".").join("\n"))),o.length+d.length!=0&&s.warn("FYI, these are the arguments:\n"+Object.keys(e.syntax).map(t=>"  • "+(e.syntax[t].required?"":"(optional) ")+JSON.stringify(t)+" -> "+e.syntax[t].description+"\n  Can use "+Bagel.internal.list(e.syntax[t].types,"or",!0)+".").join("\n\n")),c&&(s.log("In "+e.where+"."),s.log("Object:"),s.log(e.ob),s.send(),Bagel.internal.oops(e.game)),s.send(),u.length>0)for(let t in u){let n=u[t],i=e.syntax[n];if(i.subcheck&&"object"==typeof e.ob[n]){let t=Array.isArray(e.ob[n]);if(t||i.arrayLike)for(let r in e.ob[n])Bagel.check({ob:e.ob[n][r],where:t?e.where+"."+n+" item "+r:e.where+"."+n+"."+r,syntax:i.subcheck,prev:e,prevName:r},Bagel.internal.checks.disableArgCheck);else Bagel.check({ob:e.ob[n],where:e.where+"."+n,syntax:e.syntax[n].subcheck,prev:e,prevName:n},Bagel.internal.checks.disableArgCheck)}if(i.check)if(i.checkEach)for(let t in e.ob[n]){let r=i.check(e.ob[n][t],e.ob[n],t,n,e.game,e.prev);r&&(console.error(r),isNaN(t)?console.log("In "+e.where+"."+n+"."+t+"."):console.log("In "+e.where+"."+n+" item "+t+"."),console.log("Object:"),console.log(e.ob[n][t]),Bagel.internal.oops(e.game))}else{let t=i.check(e.ob[n],e.ob,n,e.game,e.prev);t&&(console.error(t),console.log("In "+e.where+"."+n+"."),console.log("Object:"),console.log(e.ob[n]),Bagel.internal.oops(e.game))}}return e.ob},get:{asset:{},sprite:(e,t,n)=>(null==t&&(t=Bagel.internal.current.game),null==t?(console.error("Oops. Looks like you're trying to run this function outside of a script. Try moving it and trying again. Alternatively, you can pass the game object in as the second parameter to this function to fix this issue."),void Bagel.internal.oops(null)):null==t.internal.idIndex[e]?!n&&(console.error("Ah, a problem occured while getting a sprite. There's no sprite with the id "+JSON.stringify(e)+"."),void Bagel.internal.oops(t)):t.game.sprites[t.internal.idIndex[e]])},step:e=>{let t=Bagel.internal.current.game,n=Bagel.internal.current.sprite;return n.scripts.steps[e](n,t,Bagel.step)},config:{flags:{warnOfUselessParameters:!0}},device:{is:{touchscreen:null===document.ontouchstart}}},Bagel.internal.requestAnimationFrame.call(window,Bagel.internal.tick);
